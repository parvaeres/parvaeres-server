/*
 * Parvaeres API
 *
 * Parvaeres magic deployment API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package parvaeres

import (
	"encoding/json"
)

// Deployment struct for Deployment
type Deployment struct {
	Status   *string   `json:"status,omitempty"`
	LiveUrls *[]string `json:"liveUrls,omitempty"`
}

// NewDeployment instantiates a new Deployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployment() *Deployment {
	this := Deployment{}
	return &this
}

// NewDeploymentWithDefaults instantiates a new Deployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentWithDefaults() *Deployment {
	this := Deployment{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Deployment) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Deployment) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Deployment) SetStatus(v string) {
	o.Status = &v
}

// GetLiveUrls returns the LiveUrls field value if set, zero value otherwise.
func (o *Deployment) GetLiveUrls() []string {
	if o == nil || o.LiveUrls == nil {
		var ret []string
		return ret
	}
	return *o.LiveUrls
}

// GetLiveUrlsOk returns a tuple with the LiveUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetLiveUrlsOk() (*[]string, bool) {
	if o == nil || o.LiveUrls == nil {
		return nil, false
	}
	return o.LiveUrls, true
}

// HasLiveUrls returns a boolean if a field has been set.
func (o *Deployment) HasLiveUrls() bool {
	if o != nil && o.LiveUrls != nil {
		return true
	}

	return false
}

// SetLiveUrls gets a reference to the given []string and assigns it to the LiveUrls field.
func (o *Deployment) SetLiveUrls(v []string) {
	o.LiveUrls = &v
}

func (o Deployment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.LiveUrls != nil {
		toSerialize["liveUrls"] = o.LiveUrls
	}
	return json.Marshal(toSerialize)
}

type NullableDeployment struct {
	value *Deployment
	isSet bool
}

func (v NullableDeployment) Get() *Deployment {
	return v.value
}

func (v *NullableDeployment) Set(val *Deployment) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployment(val *Deployment) *NullableDeployment {
	return &NullableDeployment{value: val, isSet: true}
}

func (v NullableDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
