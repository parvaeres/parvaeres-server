/*
 * Parvaeres API
 *
 * Parvaeres magic deployment API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package parvaeres

import (
	"errors"
	"log"

	"github.com/riccardomc/parvaeres/pkg/gitops"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// DeploymentDeploymentIdGet - Get the deployment with id deploymentId
func (s *DefaultApiService) DeploymentDeploymentIdGet(deploymentId string) (interface{}, error) {
	// TODO - update DeploymentDeploymentIdGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'DeploymentDeploymentIdGet' not implemented")
}

// DeploymentPost - Create a new deployment
func (s *DefaultApiService) DeploymentPost(repository string, email string) (interface{}, error) {
	// TODO - update DeploymentPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	err := gitops.PostApplication(repository, email)
	if err != nil {
		log.Printf(err.Error())
		return nil, err
	}
	return DeploymentAcceptedResponse{
		Repository: repository,
		Email:      email,
		Message:    "OK",
		Result:     "OK",
	}, nil
}
